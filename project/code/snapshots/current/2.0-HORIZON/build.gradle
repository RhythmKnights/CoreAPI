plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'io.rhythmknights'
version = '2.0-HORIZON'
description = 'Integration library for CoreFramework plugins'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://libraries.minecraft.net/' } // For Mojang authlib
}

dependencies {
    // Minecraft server API - use one of these
    compileOnly 'org.spigotmc:spigot-api:1.20.1-R0.1-SNAPSHOT' // Using a more stable version
    
    // Adventure for component text handling
    api 'net.kyori:adventure-api:4.14.0' // Using slightly older, more compatible version
    api 'net.kyori:adventure-text-minimessage:4.14.0'
    api 'net.kyori:adventure-platform-bukkit:4.3.0'
    
    // Annotations
    compileOnly 'org.jetbrains:annotations:24.0.0'
    
    // Mojang authlib for GameProfile and Property
    compileOnly 'com.mojang:authlib:1.5.25'
    
    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

processResources {
    // Include plugin.yml with variables
    inputs.property 'version', version
    filesMatching('plugin.yml') {
        expand(
            'version': version,
            'description': project.description
        )
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 17 // Set to 17 for compatibility with most Minecraft servers
    options.compilerArgs += ['-parameters']
}

// JavaDoc generation task
javadoc {
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('charset', 'UTF-8')
    options.addStringOption('encoding', 'UTF-8')
    options.addStringOption('docencoding', 'UTF-8')
    
    // Exclude package-info.java files if needed
    exclude '**/package-info.java'
    
    // Link to external JavaDocs
    options.links 'https://hub.spigotmc.org/javadocs/bukkit/'
    options.links 'https://javadoc.io/doc/net.kyori/adventure-api/latest/'
    options.links 'https://javadoc.io/doc/org.jetbrains/annotations/latest/'
    
    // Customize the output title
    title = "CoreFrame API ${project.version}"
    
    // Improve output with better navigation
    options {
        docTitle = "CoreFrame API Documentation"
        windowTitle = "CoreFrame ${project.version}"
        bottom = "Copyright Â© ${new Date().format('yyyy')}. All rights reserved."
    }
}

// Task to create a standalone documentation zip file
task documentationZip(type: Zip, dependsOn: javadoc) {
    archiveFileName = "CoreFrame-Documentation-${version}.zip"
    destinationDirectory = file("${buildDir}/distributions")
    
    from javadoc.destinationDir
}

// Task to copy LICENSE.md and README.md to META-INF
task copyMetaInfFiles(type: Copy) {
    from 'LICENSE.md', 'README.md'
    into "${buildDir}/tmp/meta-inf"
}

test {
    useJUnitPlatform()
}

// Set ShadowJar task to use the same Java compatibility level as the compile task
shadowJar {
    dependsOn copyMetaInfFiles
    
    archiveClassifier.set('')
    
    // Include LICENSE.md and README.md in META-INF
    from("${buildDir}/tmp/meta-inf") {
        into "META-INF"
    }
    
    // Relocate dependencies if needed
    relocate 'net.kyori.adventure', 'io.rhythmknights.coreframe.libs.adventure'
    relocate 'net.kyori.examination', 'io.rhythmknights.coreframe.libs.examination'
    
    // Removed the minimize section completely to avoid issues
    
    // Configuration for manifest
    manifest {
        attributes(
            'Implementation-Title': 'CoreFrame',
            'Implementation-Version': version,
            'Built-By': System.properties['user.name'],
            'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']})",
            'Build-Jdk': System.properties['java.version']
        )
    }
}

// Make sure all builds default to the shadowJar and documentationZip tasks
assemble {
    dependsOn shadowJar
    dependsOn documentationZip
}

// Publishing configuration for Maven (optional)
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            pom {
                name = 'CoreFrame API'
                description = project.description
                url = 'https://github.com/rhythmknights/CoreFrameAPI'
                
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                
                developers {
                    developer {
                        id = 'rhythmknights'
                        name = 'Rhythm Knights'
                        email = 'io.rhythmknights@gmail.com'
                    }
                }
                
                scm {
                    connection = 'scm:git:git://github.com/rhythmknights/CoreFrameAPI.git'
                    developerConnection = 'scm:git:ssh://github.com:rhythmknights/CoreFrameAPI.git'
                    url = 'https://github.com/rhythmknights/CoreFrameAPI'
                }
            }
        }
    }
    
    repositories {
        maven {
            name = 'localRepo'
            url = layout.buildDirectory.dir("repo")
        }
    }
}
