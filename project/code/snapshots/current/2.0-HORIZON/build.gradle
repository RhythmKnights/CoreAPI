plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
}

group = 'io.rhythmknights'
version = '2.0-HORIZON'
description = 'GUI building API for CoreFramework plugins'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    maven { url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://libraries.minecraft.net/' }
}

dependencies {
    // Bukkit API
    compileOnly 'org.spigotmc:spigot-api:1.21.5-R0.1-SNAPSHOT'

    // Adventure API - PROVIDED BY COREFRAMEWORK AT RUNTIME
    compileOnly 'net.kyori:adventure-api:4.21.0'
    compileOnly 'net.kyori:adventure-text-minimessage:4.21.0'
    compileOnly 'net.kyori:adventure-platform-bukkit:4.4.0'
    compileOnly 'net.kyori:adventure-text-serializer-gson:4.21.0'
    compileOnly 'net.kyori:adventure-text-serializer-legacy:4.21.0'

    // Annotations
    compileOnly 'org.jetbrains:annotations:24.0.0'

    // Mojang authlib for GameProfile and Property
    compileOnly 'com.mojang:authlib:1.5.25'

    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

processResources {
    filesMatching('plugin.yml') {
        expand(
            'version': version,
            'description': project.description
        )
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 17
    options.compilerArgs += ['-parameters']
}

// Configure Gradle's default 'jar' task
jar {
    dependsOn(project.tasks.compileJava) // Ensure compilation before jarring
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    // Explicitly set the destination and file name
    destinationDirectory = file("${buildDir}/libs")
    archiveFileName = "${project.name}-${version}.jar"
    manifest {
        attributes(
            'Implementation-Title': 'CoreAPI',
            'Implementation-Version': version,
            'Built-By': System.properties['user.name']
        )
    }
    from sourceSets.main.output

    // Error Logging for 'jar' task
    doLast {
        if (it.state.failure) {
            ant.mkdir(dir: "${buildDir}/logs")
            ant.echo(file: "${buildDir}/logs/error.jar.log", append: false, message: it.state.failure.exception.message)
        }
    }
}

// Configure Gradle's default 'javadoc' task
javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = file("${buildDir}/docs/javadoc")
    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    title = "CoreAPI ${project.version}"

    // Error Logging for 'javadoc' task
    doLast {
        if (it.state.failure) {
            ant.mkdir(dir: "${buildDir}/logs")
            ant.echo(file: "${buildDir}/logs/error.javadoc.log", append: false, message: it.state.failure.exception.message)
        }
    }
}

// Register the 'fullbuild' task to depend on default jar and javadoc tasks
tasks.register('fullbuild') {
    dependsOn tasks.javadoc
    dependsOn tasks.jar
}

test {
    useJUnitPlatform()
}

// Publishing configuration for library distribution
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = 'CoreAPI'
                description = project.description

                properties = [
                    'maven.compiler.source': '17',
                    'maven.compiler.target': '17'
                ]
            }
        }
    }
}